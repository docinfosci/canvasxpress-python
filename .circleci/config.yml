# Python images provided by https://hub.docker.com/_/python

version: 2.1

jobs:
  build-python-latest:
    docker:
      - image: python:3.10.8-bullseye

    steps:
      - checkout
      - run:
          name: Review checkout
          command: ls -la

      - run:
          name: Indicate build profile
          command: |
            echo "User: $(whoami) | User ID: ${UID} | Group ID: ${GID}"

            GIT_WORKING_BRANCH="$(git branch | grep \* | cut -d ' ' -f2)"
            if [ $GIT_WORKING_BRANCH = "main" ]
            then
                BRANCH_STAGE=${BRANCH_STAGE:="master"}
            else
                BRANCH_STAGE=${BRANCH_STAGE:="develop"}
            fi
            echo "Source edition matches '${BRANCH_STAGE}' (branch '${GIT_WORKING_BRANCH}')"

      - run:
          name: Install Web drivers
          command: |
            export DEBIAN_FRONTEND=noninteractive
            export DEBIAN_PRIORITY=critical
            apt-get update -y
            apt-get install -yq apt-utils

            # Install the Chromium browser
            apt-get install -yq chromium
            which chromium
            chromium --version

            # Install the Chromium webdriver
            apt-get -yq update
            apt-get -yq install --fix-missing chromium-driver
            which chromedriver
            chromedriver --version

      - run:
          name: Install Node dependencies
          command: |
            apt-get -yq install --fix-missing nodejs
            apt-get -yq install --fix-missing npm
            node -v

      - run:
          name: Install Python dependencies
          command: |
            pip install --no-cache-dir -U -r ./requirements-project.txt
            invoke init --dev --list

      - run:
          name: Generate Dash Component
          command: |
            cd plotly/cxdash/

            #  Ensure the presence of a virtual environment
            if ! [[ -d ./venv ]] ; then
                python3 -m venv ./venv
            fi
            source ./venv/bin/activate

            # Ensure that essential project utilities are available
            pip install -U pip setuptools wheel
            pip install -U -r requirements.txt

            npm install canvasxpress
            npm install canvasxpress-react

            npm run build
            cp -R ./cxdash ../../

      - run:
          name: Static analysis
          command: |
            prospector \
                --zero-exit \
                --show-profile \
                --no-autodetect \
                --strictness low \
                -o text \
                ./canvasxpress

      - run:
          name: Test
          command: invoke test

      - store_test_results:
          path: pytest_result.xml

      - run:
          name: Report
          command: invoke report

      - run:
          name: Deploy artifacts
          command: |
            echo "Repository is from $(git config --get remote.origin.url)"
            GIT_REPO_OWNER="$(git config --get remote.origin.url | cut -d: -f2 | cut -d/ -f1)"
            echo "Found repository owner ${GIT_REPO_OWNER}"

            # Only attempt the deployment for the project owner/committer
            if [ $GIT_REPO_OWNER == "docinfosci" ]
            then
              # Establish package components
              rm -rf ./dist
              python ./build_pkg_setup.py
              python setup.py sdist

              # Confirm the installation user account
              echo "Deploying via TWINE user ${TWINE_USERNAME}"

              # Only publish non-dev editions to PyPI
              GIT_WORKING_BRANCH="$(git branch | grep \* | cut -d ' ' -f2)"
              if [ $GIT_WORKING_BRANCH == "main" ]
              then
                  # Production deployment
                  twine upload --verbose -u $TWINE_USERNAME -p $PRD_TWINE_PASSWORD --repository pypi ./dist/*

              else
                  # Development deployment
                  twine upload --verbose -u $TWINE_USERNAME -p $TWINE_PASSWORD --repository testpypi ./dist/*

              fi

            else
              echo "Skipping deployment for repository owner ${GIT_REPO_OWNER}"

            fi


  build-python-oldest:
    docker:
      - image: python:3.6.8-bullseye

    steps:
      - checkout
      - run:
          name: Review checkout
          command: ls -la

      - run:
          name: Indicate build profile
          command: |
            echo "User: $(whoami) | User ID: ${UID} | Group ID: ${GID}"

            GIT_WORKING_BRANCH="$(git branch | grep \* | cut -d ' ' -f2)"
            if [ $GIT_WORKING_BRANCH = "main" ]
            then
                BRANCH_STAGE=${BRANCH_STAGE:="master"}
            else
                BRANCH_STAGE=${BRANCH_STAGE:="develop"}
            fi
            echo "Source edition matches '${BRANCH_STAGE}' (branch '${GIT_WORKING_BRANCH}')"

      - run:
          name: Install Web drivers
          command: |
            export DEBIAN_FRONTEND=noninteractive
            export DEBIAN_PRIORITY=critical
            apt-get update -y
            apt-get install -yq apt-utils

            # Install the Chromium browser
            apt-get install -yq chromium
            which chromium
            chromium --version

            # Install the Chromium webdriver
            apt-get -yq update
            apt-get -yq install --fix-missing chromium-driver
            which chromedriver
            chromedriver --version

      - run:
          name: Install Node dependencies
          command: |
            apt-get -yq install --fix-missing nodejs
            apt-get -yq install --fix-missing npm
            node -v

      - run:
          name: Install Python dependencies
          command: |
            pip install --no-cache-dir -U -r ./requirements-project.txt
            invoke init --dev --list

      - run:
          name: Generate Dash Component
          command: |
            cd plotly/cxdash/

            #  Ensure the presence of a virtual environment
            if ! [[ -d ./venv ]] ; then
                python3 -m venv ./venv
            fi
            source ./venv/bin/activate

            # Ensure that essential project utilities are available
            pip install -U pip setuptools wheel
            pip install -U -r requirements.txt

            npm install canvasxpress
            npm install canvasxpress-react

            npm run build
            cp -R ./cxdash ../../

      - run:
          name: Test
          command: invoke test

      - store_test_results:
          path: pytest_result.xml

workflows:
  github-commit:
    jobs:
      - build-python-oldest
      - build-python-latest:
          requires:
            - build-python-oldest

  weekly:
    jobs:
      - build-python-oldest
      - build-python-latest:
          requires:
            - build-python-oldest

    triggers:
      - schedule:
          cron: "0 0 * * 0"
          filters:
            branches:
              only:
                - main